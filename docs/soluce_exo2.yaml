openapi: 3.0.0
info:
  description: |
    API permettant de récupérer les résultats des éditions du tour de France
    
    **Toutes les routes avec un cadenas sont protégées par le protocole OAuth2**
  version: 1.0.0
  title: "API Tour de France"
tags:
- name: tour de france
  description: Gestion des informations autour d'une édition
servers:
  - url: "https://api-dev.cloudgaz.com/si/api-demo/v1"
    description : "serveur de dev"

paths:
  /palmares:
    get:
      tags:
      - tour de france
      summary: Affiche le palmares du tour de France
      operationId: getPalma
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Réponse en succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPalmaresResponse'
        '401':
          description: "Votre jeton d'accéss est invalide ou périmé ce faisant l'accès à la ressource vous est refusé"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Erreur interne 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
      security:
       - bearerAuth: []
  /coureurs/{coureur_id}/palmares:
    get:
      tags:
      - tour de france
      summary: Affiche le palmares d'un coureur du tour de France
      operationId: getCoureurPalma
      parameters:
        - $ref: '#/components/parameters/coureur_id'
      responses:
        '200':
          description: Réponse en succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCoureurPalmaresResponse'
        '401':
          description: "Votre jeton d'accéss est invalide ou périmé ce faisant l'accès à la ressource vous est refusé"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Erreur interne 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
      security:
       - bearerAuth: [] 
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GetCollectionBase:
      required:
        - offset
        - limit
        - count
        - total
      properties:
        offset:
          description: Nombre du premier résultat retourné
          type: integer
          format: int32
        limit:
          description: Nombre de résultats à récupérer
          type: integer
          format: int32
        count:
          description: Nombre de résultats réellement retournés 
          type: integer
          format: int32
        total:
          description: Nombre total de résultats
          type: integer
          format: int32

    ClassementType:
      type: string
      enum: 
        - general
        - grimpeur
        - jeune
        - equipe
      default: general
      
    Coureur:
      properties:
        id:
          type: "string"
          format: "uuid"
        nom:
          type: "string"
          example: Dupont
        prenom:
          type: "string"
          example: Jean
        dateNaissance:
          type: "string"
          description: "format aaaa-mm-jj ISO"
          format: date
          example: "1990-12-02"
        dateDeces:
          type: "string"
          description: "format aaaa-mm-jj ISO"
          format: date
          nullable: true
          example: null
        pays:
          type: "string"
          description: Code ISO-3166-1
          example: "FR"
      
    Team:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        nom:
          type: "string"
          example: "AG2R"
        manager:
          type: "string"
          example: "Martin Petit"
        capitaine:
          $ref: '#/components/schemas/Coureur'
        participations:
          type: array
          items:
            type: integer
          example:
          - 2019
          - 2020
        sponsors:
          type: array
          items:
            type: string
          example:
          - "EDF"
          - "Uber Eats"

    Palmares:
      type: "object"
      properties:
        victoires:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/ClassementType'
              annees:
                type: "array"
                items: 
                  type: "integer"
                example:
                  - 2013
                  - 2015
                  - 2016
                  - 2017

    GetTeamsResponse:
      required: 
      - equipes
      allOf:
        - $ref: '#/components/schemas/GetCollectionBase'
      properties:
        equipes:
         type: array
         items:
           $ref: '#/components/schemas/Team'

    GetCoureurPalmaresResponse:
      $ref: '#/components/schemas/Palmares'

    GetPalmaresResponse:
      required: 
      - palmares
      allOf:
        - $ref: '#/components/schemas/GetCollectionBase'
      properties:
        palmares:
         type: array
         items:
            allOf:
              - $ref: '#/components/schemas/Palmares'
            properties:
              coureurId:
                type: "string"
                format: "uuid"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Unauthorized:
      description: "Votre jeton d'accéss est invalide ou périmé ce faisant l'accès à la ressource vous est refusé"
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - unauthorized
        message:
          example: "Your request is unauthorized to call this resource"
            
    BadRequest:
      description: Bad Request
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - bad_request
        message:
          example: "The payload do not respect the contract"
 
    InternalError:
      description: Erreur interne
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - internal_error
        message:
          example: "Please contact the administrator..."   
          
    NotFound:
      description: The resource not found
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - not_found
        message:
          example: "Resource not found"
          
    Conflict:
      description: The resource already exists
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: "string"
          enum:
            - conflict
        message:
          example: "The resource already exists"
  parameters:
    annee:
      name: annee
      in: path
      description: Identifiant de l'édition du tour
      required: true
      schema:
        type: string
        format: year
    equipe_id:
      name: equipe_id
      in: path
      description: Identifiant de l'équipe
      required: true
      schema:
        type: integer
    coureur_id:
      name: coureur_id
      in: path
      description: Identifiant du coureur
      required: true
      schema:
        type: integer    
    numero_etape:
      name: numero_etape
      in: path
      description: Numéro de l'étape
      required: true
      schema:
        type: integer
    classement_type:
      name: classement_type
      in: query
      description: Type de classement
      required: false
      schema:
        $ref: '#/components/schemas/ClassementType'
    limit:
      name: limit
      in: query
      description: Nombre de résultat à récupérer par appel. Valeur par défaut 25, maximum 50
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 50
        default: 25
    offset:
      name: offset
      in: query
      description: Numéro de l'élément à aller récuper. Valeur par défault 0 (1er élément de la liste)
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0