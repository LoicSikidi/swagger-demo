openapi: 3.0.0
info:
  description: |
    API permettant de récupérer les résultats des éditions du tour de France
    
    **Toutes les routes avec un cadenas sont protégées par le protocole OAuth2**
  version: 1.0.0
  title: "API Tour de France"
  
  
tags:
- name: tour de france
  description: Gestion des informations autour d'une édition
  

paths:
  /equipes:
    get:
      tags:
      - tour de france
      summary: Affiche les équipes ayant participé au tour de France
      operationId: getEquipes
      responses:
        '200':
          description: Réponse en succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamsResponse'
        '401':
          description: "Votre jeton d'accéss est invalide ou périmé ce faisant l'accès à la ressource vous est refusé"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Erreur interne 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
      security:
       - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GetCollectionBase:
      required:
        - offset
        - limit
        - count
        - total
      properties:
        offset:
          description: Nombre du premier résultat retourné
          type: integer
          format: int32
        limit:
          description: Nombre de résultats à récupérer
          type: integer
          format: int32
        count:
          description: Nombre de résultats réellement retournés 
          type: integer
          format: int32
        total:
          description: Nombre total de résultats
          type: integer
          format: int32
          
    Coureur:
      properties:
        id:
          type: "string"
          format: "uuid"
        nom:
          type: "string"
          example: Dupont
        prenom:
          type: "string"
          example: Jean
        dateNaissance:
          type: "string"
          description: "format aaaa-mm-jj ISO"
          format: date
          example: "1990-12-02"
        dateDeces:
          type: "string"
          description: "format aaaa-mm-jj ISO"
          format: date
          nullable: true
          example: null
        pays:
          type: "string"
          description: Code ISO-3166-1
          example: "FR"
      
    Team:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        nom:
          type: "string"
          example: "AG2R"
        manager:
          type: "string"
          example: "Martin Petit"
        capitaine:
          $ref: '#/components/schemas/Coureur'
        participations:
          type: array
          items:
            type: integer
          example:
          - 2019
          - 2020
        sponsors:
          type: array
          items:
            type: string
          example:
          - "EDF"
          - "Uber Eats"

    GetTeamsResponse:
      required: 
      - equipes
      allOf:
        - $ref: '#/components/schemas/GetCollectionBase'
      properties:
        equipes:
         type: array
         items:
           $ref: '#/components/schemas/Team'

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Unauthorized:
      description: "Votre jeton d'accéss est invalide ou périmé ce faisant l'accès à la ressource vous est refusé"
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - unauthorized
        message:
          example: "Your request is unauthorized to call this resource"
            
    BadRequest:
      description: Bad Request
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - bad_request
        message:
          example: "The payload do not respect the contract"
 
    InternalError:
      description: Erreur interne
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - internal_error
        message:
          example: "Please contact the administrator..."   
          
    NotFound:
      description: The resource not found
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - not_found
        message:
          example: "Resource not found"
          
    Conflict:
      description: The resource already exists
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: "string"
          enum:
            - conflict
        message:
          example: "The resource already exists"
